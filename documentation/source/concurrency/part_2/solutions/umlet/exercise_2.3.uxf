<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>60</x>
      <y>210</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--
Ziel
x = Eingang

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>230</y>
      <w>140</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>210</y>
      <w>140</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>310</x>
      <y>250</y>
      <w>161</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
x == g3
--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>310</x>
      <y>200</y>
      <w>161</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
x == g1
--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>350</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g1 = Gleis();

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>410</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g2 = Gleis();

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>470</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g3 = Gleis();

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>210</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
A einfahren
auf g1

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>210</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>230</y>
      <w>100</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;11.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>360</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>420</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>480</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>60</x>
      <y>620</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--
Ziel
y = Eingang

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>310</x>
      <y>630</y>
      <w>161</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
y == g2
--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>640</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>640</y>
      <w>140</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>590</y>
      <w>140</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>310</x>
      <y>680</y>
      <w>161</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
y == g3
--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>310</x>
      <y>580</y>
      <w>161</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
y == g1
--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>550</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B einfahren
auf g1

'lb=3
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>590</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>360</y>
      <w>100</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>20</x>
      <y>230</y>
      <w>60</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>10</x>
      <y>640</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>260</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
A einfahren
auf g3

'lb=3
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>260</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>300</y>
      <w>100</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;11.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>620</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B einfahren
auf g2

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>670</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B einfahren
auf g3

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>420</y>
      <w>100</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;210.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>480</y>
      <w>100</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>640</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>690</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>270</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g1 und g2 
sperren

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>910</x>
      <y>190</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g1.zug = A

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>200</y>
      <w>260</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>910</x>
      <y>260</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g3.zug = A

'lb=1
'rb=3

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>860</x>
      <y>280</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>280</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>280</y>
      <w>810</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;150.0;10.0;120.0;790.0;120.0;790.0;10.0;760.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>300</y>
      <w>760</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;40.0;740.0;40.0;740.0;10.0;730.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>1100</x>
      <y>190</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
A ausfahren
von g1

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>200</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>1100</x>
      <y>260</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
A ausfahren
von g3

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>260</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>130</y>
      <w>1040</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;360.0;10.0;290.0;10.0;10.0;1020.0;10.0;1020.0;160.0;990.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>160</y>
      <w>1030</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;210.0;10.0;150.0;10.0;10.0;1010.0;10.0;1010.0;60.0;960.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>190</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>260</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>560</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g2 und g3 
sperren

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>620</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g3 sperren

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>910</x>
      <y>550</y>
      <w>141</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g1.zug = B

'lb=1
'rb=3

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>910</x>
      <y>620</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g2.zug = B

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>910</x>
      <y>670</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
g3.zug = B

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>280</y>
      <w>100</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;11.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>420</y>
      <w>100</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;160.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>680</y>
      <w>260</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>630</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>570</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>860</x>
      <y>570</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>860</x>
      <y>630</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>480</y>
      <w>780</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;40.0;760.0;40.0;760.0;80.0;740.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>420</y>
      <w>810</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;30.0;790.0;50.0;790.0;160.0;750.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>480</y>
      <w>840</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;50.0;820.0;50.0;820.0;150.0;760.0;150.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>1120</x>
      <y>580</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B ausfahren
von g1

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>1120</x>
      <y>630</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B ausfahren
von g2

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>1120</x>
      <y>680</y>
      <w>141</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.
--
B ausfahren
von g3

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>590</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>640</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>690</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>680</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>630</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>580</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>270</x>
      <y>480</y>
      <w>1030</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;60.0;10.0;260.0;1010.0;260.0;1010.0;230.0;990.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>420</y>
      <w>1080</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;130.0;10.0;340.0;1060.0;340.0;1060.0;240.0;1020.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>360</y>
      <w>1120</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;160.0;10.0;420.0;1100.0;420.0;1100.0;250.0;1040.0;250.0</additional_attributes>
  </element>
</diagram>
