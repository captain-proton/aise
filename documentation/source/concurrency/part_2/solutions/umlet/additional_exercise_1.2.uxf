<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>120</y>
      <w>91</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>60</x>
      <y>210</y>
      <w>90</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Freigabe von R1
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>480</x>
      <y>110</y>
      <w>91</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--
R1();

'lb=1
'rb=2

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>510</x>
      <y>260</y>
      <w>91</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--
R1();
R2();

'lb=2
'rb=3

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>70</x>
      <y>280</y>
      <w>60</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>P2
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>510</x>
      <y>460</y>
      <w>91</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--
R1();
R2();

'lb=2
'rb=3

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>70</x>
      <y>450</y>
      <w>60</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>P3
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>190</x>
      <y>210</y>
      <w>71</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>130</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>140</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>130</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>270</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>470</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>150</y>
      <w>470</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;80.0;10.0;80.0;10.0;50.0;450.0;50.0;450.0;10.0;420.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>150</y>
      <w>100</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>230</x>
      <y>270</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>490</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>280</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>500</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>220</y>
      <w>530</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;30.0;10.0;130.0;510.0;130.0;510.0;80.0;450.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>70</x>
      <y>130</y>
      <w>60</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>P1
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>200</x>
      <y>380</y>
      <w>90</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Freigabe von R2
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>220</y>
      <w>100</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;300.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>220</y>
      <w>100</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>260</y>
      <w>91</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>480</y>
      <w>91</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--

'lb=2
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>400</x>
      <y>380</y>
      <w>71</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>// Modify the text below and
// observe the element preview.

--

'lb=1
'rb=1

bg=#bbdefb</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int x = 0;
int y=textHeight();
int dockerHeight = 12;
int dockerWidth = dockerHeight;
int dockSpacing = 8;
int dividerWidth = 10;
int dividerLeft = (int) ((width - dividerWidth) * 0.4);
int dividerRight = (int) ((width + dividerWidth) * 0.4);
int textX = 0;
ArrayList&lt;String&gt; textLeft = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; textRight = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; currentTextSide = textLeft;

drawRectangle(dockerWidth,0,width - 2*dockerWidth,height);


for(String textline : textlines) {
    if (textline.equals("--")) {
        currentTextSide = textRight;
    }
    if (!textline.isEmpty()
        &amp;&amp; !textline.equals("--")
        &amp;&amp; textline.indexOf("'") != 0)
        currentTextSide.add(textline);
}

for (String lt : textLeft) {
    y += print(lt, dockerWidth + 4, y);
}

if (textLeft.size() == 0 &amp;&amp; textRight.size() &gt; 0) {
    dividerLeft = dockerWidth + 10;
    dividerRight = dockerWidth + 10 + dividerWidth;
} else if (textLeft.size() &gt; 0 &amp;&amp; textRight.size() == 0) {
    dividerLeft = width - (dockerWidth + 10 + dividerWidth);
    dividerRight = width - (dockerWidth + 10);
}

y = textHeight();
textX = dividerRight + 4;

for (String rt : textRight) {
    y += print(rt, textX, y);
}

drawLine(dividerLeft, 0, dividerRight, height / 2);
drawLine(dividerRight, height / 2, dividerLeft, height);


for(String textline : textlines) {
    if (textline.indexOf("'lb") == 0) {
        int rightDockers = Integer.valueOf(textline.substring(4));
        int rightDockersHeight = rightDockers * dockerHeight + (rightDockers - 1) * dockSpacing;
        int startDockHeight = (height - rightDockersHeight) / 2;
        for (int i = 0; i &lt; rightDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(0, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    } else if (textline.indexOf("'rb") == 0) {
        int leftDockers = Integer.valueOf(textline.substring(4));
        int leftDockersHeight = leftDockers * dockerHeight + (leftDockers - 1) * dockSpacing;
        int startDockHeight = (height - leftDockersHeight) / 2;
        for (int i = 0; i &lt; leftDockers; i++) {
            int addY = i * (dockerHeight + dockSpacing);
            drawRectangle(width-dockerWidth, startDockHeight + addY, dockerWidth, dockerHeight);
        }
    }
}

</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>390</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>300</y>
      <w>70</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>310</y>
      <w>300</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;90.0;10.0;70.0;10.0;50.0;280.0;50.0;280.0;10.0;240.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>220</y>
      <w>540</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;60.0;10.0;330.0;520.0;330.0;520.0;280.0;460.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>390</y>
      <w>290</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;30.0;10.0;50.0;270.0;50.0;270.0;130.0;240.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>390</y>
      <w>70</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>50.0;100.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
