<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>420</x>
      <y>310</y>
      <w>71</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>An-Knopf
--
aktiviert</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>530</x>
      <y>280</y>
      <w>91</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>Fehler
--
Komponente</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>530</x>
      <y>170</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>ausgeben in</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>220</y>
      <w>50</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>540</x>
      <y>60</y>
      <w>71</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>Errorlog
--
Dateipfad</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>30</x>
      <y>540</y>
      <w>121</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>Ultraschallsensor
--
Nummer
Richtung
Entfernung
</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>900</x>
      <y>540</y>
      <w>101</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>VideoIO
--
CAN-ID
Coding
Container
OutputStream
</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>940</x>
      <y>450</y>
      <w>61</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>LED
--
IO-Port
Farbe
</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>900</x>
      <y>690</y>
      <w>81</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>AudioIO
--
CAN-ID
Lautst√§rke
Coding
</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>540</y>
      <w>90</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>410</x>
      <y>540</y>
      <w>231</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>Systemstatus
--
System aktiv
eingelegter Gang
letzte gemessene Geschwindigkeit
Fehlerkomponente
niedrigste Entfernung vorne
niedrigste Entfernung hinten</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>210</x>
      <y>510</y>
      <w>121</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>liest
Entfernung</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>530</x>
      <y>390</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>speichern in</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>320</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-
m2=(1,1)</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>440</y>
      <w>50</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>540</y>
      <w>110</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(8,8)</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>430</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>schaltet</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>450</y>
      <w>130</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(14,14)</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>540</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>450</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>690</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>520</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>gibt aus</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>540</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>730</x>
      <y>670</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>gibt aus</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>650</y>
      <w>130</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;110.0;50.0</additional_attributes>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>870</x>
      <y>280</y>
      <w>101</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>Bordcomputer
--
CAN-ID</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean inAttributes = false;
int entityY = -1;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		inAttributes = true;
		entityY = (int) (y-textHeight()*0.7);
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	} else {
		if (inAttributes) {
			y += print(textline, 10, y);	
		} else {
			y += printCenter(textline,y);	
		}
	}
}
if (inAttributes) {
	drawLine(5, entityY, 5, height);
	drawRectangle(0,0,onGrid(width),entityY);
} else {
	drawRectangle(0,0,onGrid(width),onGrid(height));
}
</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>700</x>
      <y>260</y>
      <w>101</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>meldet an</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>280</y>
      <w>110</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>100</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>280</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m2=(0,1)</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1040</x>
      <y>420</y>
      <w>230</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Die LEDs sind direkt
an das System angeschlossen
und werden √ºber ihren
jeweiligen IO-Port angesprochen</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1010</x>
      <y>250</y>
      <w>240</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Im Automobil vorhandene
Komponenten werden √ºber den
CAN-Bus und deren ID
ansgesprochen und entsprechend
im System hinterlegt</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>410</x>
      <y>420</y>
      <w>101</w>
      <h>71</h>
    </coordinates>
    <panel_attributes>(de-)aktiviert</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

int y=height / 2 - textHeight() * textlines.size() * 2 / 3;

for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline,y);
}

Polygon p = new Polygon();
p.addPoint(width / 2, 0);
p.addPoint(width, height / 2);
p.addPoint(width / 2, height);
p.addPoint(0, height / 2);
drawPolygon(p);</custom_code>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>350</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>480</y>
      <w>50</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-
m1=(1,1)</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
